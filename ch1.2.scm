; Exercise 1.9.  Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.
(define (inc x)
  (+ x 1))

(define (dec x)
  (- x 1))

(define (plus1 a b)
  (if (= a 0)
      b
      (inc (plus1 (dec a) b))))

      
(define (plus2 a b)
  (if (= a 0)
    b
    (plus2 (dec a) (inc b))))

; (trace plus1)
; (plus1 4 5)
; (plus2 4 5)

; Using the substitution model, illustrate the process generated by each procedure in evaluating (+ 4 5). Are these processes iterative or recursive? 
; plus 1 is recursive as it calls itself inside of the inc call
; plus 2 is iterative as you can clearly see that each variable gets updated and the function is called again

; Exercise 1.10.  The following procedure computes a mathematical function called Ackermann's function.

(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

; What are the values of the following expressions?

(A 1 10)

(A 2 4)

(A 3 3)

; Consider the following procedures, where A is the procedure defined above:

(define (f n) (A 0 n))
; 2n

(define (g n) (A 1 n))
; n^n

(define (h n) (A 2 n))
; 2^h(n-1)

(define (k n) (* 5 n n))
; 5n2

; Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n2. 

; Exercise 1.11.  A function f is defined by the rule that f(n) = n if n<3 and f(n) = f(n - 1) + 2f(n - 2) + 3f(n - 3) if n> 3. Write a procedure that computes f by means of a recursive process. Write a procedure that computes f by means of an iterative process. 

; recursive
(define (fR n)
  (cond ((< n 3) n)
    (else (+ (fR (- n 1)) (* 2 (fR (- n 2))) (* 3 (fR (- n 3)))))))

; iterative
(define (fI n)
  (if (< n 3) 
    n
    (fI-iter 2 1 0 n)))

(define (fI-iter a b c n)
  (if (< n 3)
    a
    (fI-iter (+ a (* 2 b) (* 3 c)) a b (- n 1))))


;Exercise 1.12.  The following pattern of numbers is called Pascal's triangle.

  ;         1
  ;       1   1
  ;     1   2   1
  ;   1   3   3   1
  ; 1   4   6   4   1

;The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a procedure that computes elements of Pascal's triangle by means of a recursive process. 

(define (pascalR val n)
  (cond ((> n val) #f) 
        ((or (= n val) (= 0 n)) 1)
        (else (+ (pascalR (- val 1) n)
                 (pascalR (- val 1) (- n 1))))))
